import React, { useState } from "react";
import "./Login.css";
import { login, register } from "../api"; // ‚úÖ import t·ª´ API th·∫≠t

function Login({ onNavigate, onLogin }) {
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    password: "",
    confirmPassword: "",
    rememberMe: false,
  });

  const [isSignUp, setIsSignUp] = useState(false);
  const [loading, setLoading] = useState(false);

  // ‚úÖ X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  // ‚úÖ X·ª≠ l√Ω submit form (ƒëƒÉng nh·∫≠p / ƒëƒÉng k√Ω th·∫≠t)
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isSignUp) {
        // ----- üü© ƒêƒÇNG K√ù -----
        if (formData.password !== formData.confirmPassword) {
          alert("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
          setLoading(false);
          return;
        }

        const newUser = {
          fullName: formData.fullName,
          email: formData.email,
          password: formData.password,
        };

        const res = await register(newUser);
        console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:", res);
        alert("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.");
        setIsSignUp(false);
      } else {
        // ----- üü¶ ƒêƒÇNG NH·∫¨P -----
        const credentials = {
          email: formData.email,
          password: formData.password,
        };

        const res = await login(credentials);
        console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", res);

        if (res.token) {
          // l∆∞u token (API helper c≈©ng ƒë√£ l∆∞u token), l∆∞u th√™m th√¥ng tin user n·∫øu c√≥
          const userData = res.user || { fullName: res.fullName || '', email: res.email || credentials.email };
          try { localStorage.setItem('user', JSON.stringify(userData)); } catch (e) {}
          alert("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
          if (onLogin) onLogin(userData);
          onNavigate("home");
        } else {
          alert("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token!");
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ªçi API:", error.response?.data || error.message);
      alert("L·ªói khi g·ªçi API, xem console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt!");
    } finally {
      setLoading(false);
    }
  };

  const toggleSignUp = () => {
    setIsSignUp(!isSignUp);
    setFormData({
      fullName: "",
      email: "",
      password: "",
      confirmPassword: "",
      rememberMe: false,
    });
  };

  return (
    <div className="login-container">
      {/* üîô Back to Home */}
      <button
        className="back-to-home-btn"
        onClick={() => onNavigate("home")}
        title="Quay v·ªÅ trang ch·ªß"
      >
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z" />
        </svg>
        <span>Trang ch·ªß</span>
      </button>

      {/* üåÜ Background */}
      <div className="login-background">
        <div className="login-bg-overlay"></div>
      </div>

      {/* üìã Form */}
      <div className="login-form-container">
        <div className="login-form-wrapper">
          <div className="login-logo">
            <h1>CarCare</h1>
            <p>D·ªãch v·ª• xe h∆°i chuy√™n nghi·ªáp</p>
          </div>

          <div className="login-form-box">
            <h2>{isSignUp ? "T·∫°o T√†i Kho·∫£n" : "ƒêƒÉng Nh·∫≠p"}</h2>

            <form onSubmit={handleSubmit} className="login-form">
              {isSignUp && (
                <div className="form-group">
                  <label htmlFor="fullName">H·ªç v√† T√™n</label>
                  <input
                    type="text"
                    id="fullName"
                    name="fullName"
                    value={formData.fullName}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                    required={isSignUp}
                  />
                </div>
              )}

              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="password">M·∫≠t kh·∫©u</label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  required
                />
              </div>

              {isSignUp && (
                <div className="form-group">
                  <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    required
                  />
                </div>
              )}

              {!isSignUp && (
                <div className="form-options">
                  <label className="checkbox-container">
                    <input
                      type="checkbox"
                      name="rememberMe"
                      checked={formData.rememberMe}
                      onChange={handleInputChange}
                    />
                    <span className="checkmark"></span>
                    Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                  </label>
                  <a href="#forgot" className="forgot-password">
                    Qu√™n m·∫≠t kh·∫©u?
                  </a>
                </div>
              )}

              <button type="submit" className="login-btn" disabled={loading}>
                {loading
                  ? "ƒêang x·ª≠ l√Ω..."
                  : isSignUp
                  ? "T·∫°o T√†i Kho·∫£n"
                  : "ƒêƒÉng Nh·∫≠p"}
              </button>

              <div className="form-toggle">
                <p>
                  {isSignUp ? "ƒê√£ c√≥ t√†i kho·∫£n?" : "Ch∆∞a c√≥ t√†i kho·∫£n?"}
                  <button
                    type="button"
                    onClick={toggleSignUp}
                    className="toggle-btn"
                  >
                    {isSignUp ? "ƒêƒÉng nh·∫≠p ngay" : "ƒêƒÉng k√Ω ngay"}
                  </button>
                </p>
              </div>
            </form>
          </div>

          <div className="login-footer">
            <p>¬© 2025 CarCare. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Login;
