import React, { useState } from 'react';
import './BookingPage.css';

function BookingPage({ onNavigate }) {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Step 1: Vehicle Info
    licensePlate: '',
    vehicleModel: '',
    mileage: '',
    
    // Step 2: Dealer
    selectedDealer: '',
    
    // Step 3: Services
    selectedServices: [],
    
    // Step 4: Schedule
    selectedDate: null,
    selectedTime: '',
    
    // Step 5: Personal Info
    firstName: '',
    lastName: '',
    company: '',
    email: '',
    phone: '',
    agreeToTerms: false
  });

  const totalSteps = 4;

  const services = [
    {
      id: 'maintenance-eq-regular',
      name: 'B·∫£o d∆∞·ª°ng h·ªá th·ªëng th·∫Øng - xe EQ',
      category: 'B·∫£o d∆∞·ª°ng',
      icon: 'üîß',
      price: '2,500,000 VNƒê',
      description: 'Ki·ªÉm tra v√† b·∫£o d∆∞·ª°ng h·ªá th·ªëng th·∫Øng chuy√™n d·ª•ng cho xe ƒëi·ªán'
    },
    {
      id: 'maintenance-eq-a', 
      name: 'B·∫¢O D∆Ø·ª†NG A - D√≤ng xe EQ',
      category: 'B·∫£o d∆∞·ª°ng',
      icon: '‚ö°',
      price: '3,200,000 VNƒê',
      description: 'B·∫£o d∆∞·ª°ng to√†n di·ªán c∆° b·∫£n cho xe ƒëi·ªán EQ'
    },
    {
      id: 'maintenance-eq-b',
      name: 'B·∫£o D∆∞·ª°ng B - D√≤ng xe EQ',
      category: 'B·∫£o d∆∞·ª°ng',
      icon: 'üîã',
      price: '4,500,000 VNƒê',
      description: 'B·∫£o d∆∞·ª°ng n√¢ng cao v·ªõi ki·ªÉm tra h·ªá th·ªëng pin v√† ƒë·ªông c∆° ƒëi·ªán'
    },
    {
      id: 'rain-sensor',
      name: 'Thay cao su g·∫°t m∆∞a xe EQ',
      category: 'B·∫£o d∆∞·ª°ng',
      icon: 'üåßÔ∏è',
      price: '850,000 VNƒê',
      description: 'Thay th·∫ø g·∫°t m∆∞a ch√≠nh h√£ng'
    },
    {
      id: 'tire-work',
      name: 'C√¥ng vi·ªác kh√°c cho xe EQ',
      category: 'C√°c ch√†o gi√° kh√°c',
      icon: '‚öôÔ∏è',
      price: 'Li√™n h·ªá',
      description: 'D·ªãch v·ª• t√πy ch·ªânh theo y√™u c·∫ßu'
    }
  ];

  const dealers = [
    {
      id: 'dealer-1',
      name: 'C√¥ng ty TNHH Vinamotor Ngh·ªá An',
      address: 'Ng√£ T∆∞ S√¢n Bay Vinh, Ph∆∞·ªùng Vinh Ph√∫',
      city: '460000 Ngh·ªá An'
    }
  ];

  const timeSlots = [
    '08:00', '08:30', '09:00', '09:30',
    '10:00', '10:30', '11:00', '11:30',
    '13:00', '13:30', '14:00', '14:30',
    '15:00', '15:30', '16:00', '16:30'
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleServiceToggle = (serviceId) => {
    setFormData(prev => ({
      ...prev,
      selectedServices: prev.selectedServices.includes(serviceId)
        ? prev.selectedServices.filter(id => id !== serviceId)
        : [...prev.selectedServices, serviceId]
    }));
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(prev => prev + 1);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const handleSubmit = () => {
    console.log('Booking submitted:', formData);
    alert('ƒê·∫∑t l·ªãch th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.');
    onNavigate('home');
  };

  const getProgressPercentage = () => {
    return (currentStep / totalSteps) * 100;
  };

  const getStepTitle = () => {
    switch(currentStep) {
      case 1: return 'Th√¥ng tin xe c·ªßa b·∫°n';
      case 2: return 'Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu d·ªãch v·ª•';
      case 3: return 'L·ªãch h·∫πn';
      case 4: return 'Chi ti·∫øt c√° nh√¢n';
      default: return '';
    }
  };

  const getStepSubtitle = () => {
    switch(currentStep) {
      case 1: return 'ƒê·ªëi v·ªõi m·ªôt ƒë·ªÅ ngh·ªã d·ªãch v·ª• r√µng b∆∞·ªõc, ch√∫ng t√¥i c·∫ßn m·ªôt s·ªë th√¥ng tin v·ªÅ xe c·ªßa b·∫°n.';
      case 2: return 'Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu d·ªãch v·ª•.';
      case 3: return 'Ki·ªÉm tra c√°c cu·ªôc h·∫πn c√≥ s·∫µn v√† ch·ªçn m·ªôt cu·ªôc h·∫πn ph√π h·ª£p v·ªõi l·ªãch tr√¨nh c·ªßa b·∫°n';
      case 4: return 'Ch√∫ng t√¥i ch·ªâ c·∫ßn m·ªôt s·ªë th√¥ng tin v·ªÅ b·∫°n.';
      default: return '';
    }
  };

  // Generate calendar days
  const generateCalendarDays = () => {
    const days = [];
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    const firstDay = new Date(currentYear, currentMonth, 1).getDay();
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    
    // Empty cells for days before month starts
    for (let i = 0; i < firstDay; i++) {
      days.push(null);
    }
    
    // Days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const renderStep1 = () => (
    <div className="booking-step-content">
      <div className="form-section">
        <h2>
          <span className="form-section-icon">üöó</span>
          Th√¥ng tin xe
        </h2>
        <div className="form-grid">
          <div className="form-group full-width">
            <label>S·ªë VIN</label>
            <input
              type="text"
              className="form-input"
              placeholder="Nh·∫≠p bi·ªÉn s·ªë xe"
              value={formData.licensePlate}
              onChange={(e) => handleInputChange('licensePlate', e.target.value)}
            />
          </div>  
          
          <div className="form-group full-width">
            <label>Qu√£ng ƒë∆∞·ªùng ƒëi</label>
            <input
              type="text"
              className="form-input"
              placeholder="Nh·∫≠p s·ªë km"
              value={formData.mileage}
              onChange={(e) => handleInputChange('mileage', e.target.value)}
            />
            <span className="form-helper-text">Kh√¥ng b·∫Øt bu·ªôc</span>
          </div>
        </div>
      </div>

      {formData.licensePlate && (
        <div className="form-section">
          <div className="sidebar-item">
            <div className="sidebar-item-content">
              <h4>Mercedes-Benz Xe √¥ t√¥ con ƒêi·ªán</h4>
              <p>{formData.licensePlate}</p>
          </div>
          </div>
        </div>
      )}
    </div>
  );

  const renderStep2 = () => (
    <div className="booking-step-content">
      <div className="form-section">
        <h2>
          <span className="form-section-icon">üîß</span>
          B·∫£o d∆∞·ª°ng
        </h2>
        <div className="selection-grid">
            {services.filter(s => s.category === 'B·∫£o d∆∞·ª°ng').map(service => (
              <div 
                key={service.id}
              className={`selection-card ${formData.selectedServices.includes(service.id) ? 'selected' : ''}`}
                onClick={() => handleServiceToggle(service.id)}
              >
              <div className="selection-card-header">
                <span className="selection-card-icon">{service.icon}</span>
                    <input
                      type="checkbox"
                  className="selection-checkbox"
                      checked={formData.selectedServices.includes(service.id)}
                  onChange={() => {}}
                />
              </div>
              <h3>{service.name}</h3>
              <div className="selection-card-price">{service.price}</div>
              <button className="selection-card-details" onClick={(e) => e.stopPropagation()}>
                Chi ti·∫øt
              </button>
              </div>
            ))}
          </div>
        </div>

      <div className="form-section">
        <h2>
          <span className="form-section-icon">üí¨</span>
          C√°c ch√†o gi√° kh√°c
        </h2>
        <div className="selection-grid">
          {services.filter(s => s.category === 'C√°c ch√†o gi√° kh√°c').map(service => (
              <div 
                key={service.id}
              className={`selection-card ${formData.selectedServices.includes(service.id) ? 'selected' : ''}`}
                onClick={() => handleServiceToggle(service.id)}
              >
              <div className="selection-card-header">
                <span className="selection-card-icon">{service.icon}</span>
                    <input
                      type="checkbox"
                  className="selection-checkbox"
                      checked={formData.selectedServices.includes(service.id)}
                  onChange={() => {}}
                />
              </div>
              <h3>{service.name}</h3>
              <button className="selection-card-details" onClick={(e) => e.stopPropagation()}>
                Chi ti·∫øt
              </button>
              </div>
            ))}
        </div>

        <div className="form-section" style={{ marginTop: '2rem', background: '#f9fafb' }}>
          <h3 style={{ fontSize: '0.9rem', marginBottom: '1rem' }}>üí° Kh√¥ng ch·∫Øc ch·∫Øn b·∫°n c·∫ßn g√¨?</h3>
          <div className="form-group full-width">
            <label>Nh·∫≠n tr·ª£ gi√∫p v·ªÅ c√°c d·ªãch v·ª•</label>
            <textarea
              className="form-input"
              placeholder="Tin nh·∫Øn"
              rows="4"
              style={{ resize: 'vertical' }}
            />
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="booking-step-content">
      <div className="form-section">
        <h2>
          <span className="form-section-icon">üìÖ</span>
          C·∫£ VƒÉn D·ªãch V·ª•
        </h2>
        
        <div className="form-group">
          <label>Kh√¥ng ∆∞a th√≠ch</label>
          <select className="form-select">
            <option>Kh√¥ng ∆∞a th√≠ch</option>
          </select>
          <span className="form-helper-text">Kh√¥ng b·∫Øt bu·ªôc</span>
        </div>

        <div className="calendar-section">
          <div className="calendar-header">
            <h3>th√°ng 10 nƒÉm 2025</h3>
            <div className="calendar-nav-btns">
              <button className="calendar-nav-btn">‚Äπ</button>
              <button className="calendar-nav-btn">‚Ä∫</button>
            </div>
          </div>
          
          <div className="calendar-grid">
            <div className="calendar-weekdays">
              <div className="calendar-weekday">Th 2</div>
              <div className="calendar-weekday">Th 3</div>
              <div className="calendar-weekday">Th 4</div>
              <div className="calendar-weekday">Th 5</div>
              <div className="calendar-weekday">Th 6</div>
              <div className="calendar-weekday">Th 7</div>
              <div className="calendar-weekday">CN</div>
            </div>

            <div className="calendar-days">
              {generateCalendarDays().map((day, index) => (
              <button
                  key={index}
                  className={`calendar-day ${!day ? 'disabled' : ''} ${
                    formData.selectedDate === day ? 'selected' : ''
                  } ${day && day >= new Date().getDate() ? 'available' : ''}`}
                  onClick={() => day && handleInputChange('selectedDate', day)}
                  disabled={!day || day < new Date().getDate()}
                >
                  {day || ''}
              </button>
            ))}
            </div>
          </div>
        </div>

        {formData.selectedDate && (
          <div className="time-slots-section">
            <h4>Kh√¥ng th·ªùi gian kh·∫£ d·ª•ng</h4>
            <div className="time-slots-grid">
              {timeSlots.map(time => (
                <button
                  key={time}
                  className={`time-slot ${formData.selectedTime === time ? 'selected' : ''}`}
                  onClick={() => handleInputChange('selectedTime', time)}
                >
                  {time}
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="booking-step-content">
      <div className="form-section">
        <h2>L√†m th·∫ø n√†o ch√∫ng t√¥i c√≥ th·ªÉ li√™n l·∫°c v·ªõi b·∫°n?</h2>
        <div className="contact-form">
          <div className="form-grid">
            <div className="form-group">
          <label>T√™n</label>
          <input
            type="text"
                className="form-input"
                placeholder="T√™n"
            value={formData.firstName}
            onChange={(e) => handleInputChange('firstName', e.target.value)}
          />
        </div>

            <div className="form-group">
          <label>H·ªç</label>
          <input
            type="text"
                className="form-input"
                placeholder="H·ªç"
            value={formData.lastName}
            onChange={(e) => handleInputChange('lastName', e.target.value)}
          />
        </div>

            <div className="form-group full-width">
          <label>C√¥ng ty</label>
          <input
            type="text"
                className="form-input"
                placeholder="C√¥ng ty"
            value={formData.company}
            onChange={(e) => handleInputChange('company', e.target.value)}
          />
              <span className="form-helper-text">Kh√¥ng b·∫Øt bu·ªôc</span>
        </div>

            <div className="form-group full-width">
          <label>Email</label>
          <input
            type="email"
                className="form-input"
                placeholder="Email"
            value={formData.email}
            onChange={(e) => handleInputChange('email', e.target.value)}
          />
        </div>

            <div className="form-group full-width">
              <label>ƒêi·ªán tho·∫°i</label>
              <div className="phone-input-group">
                <select className="country-code-select">
                  <option>VN (+84)</option>
            </select>
            <input
              type="tel"
                  className="form-input"
                  placeholder="ƒêi·ªán tho·∫°i"
              value={formData.phone}
              onChange={(e) => handleInputChange('phone', e.target.value)}
            />
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="expandable-section">
        <div className="expandable-header">
          <h3>
            ƒê·ªãa ch·ªâ c·ªßa b·∫°n l√† g√¨?
            <span className="expandable-required">(Kh√¥ng b·∫Øt bu·ªôc)</span>
          </h3>
          <div className="expandable-toggle">‚ñº</div>
        </div>
      </div>

      <div className="expandable-section">
        <div className="expandable-header">
          <h3>
            B·∫≠t k√Ω √Ω ki·∫øn cho ƒë·ªëi t√°c Mercedes-Benz c·ªßa b·∫°n?
            <span className="expandable-required">(Kh√¥ng b·∫Øt bu·ªôc)</span>
          </h3>
          <div className="expandable-toggle">‚ñº</div>
        </div>
      </div>

      <div className="privacy-notice">
        <h4>Quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n l√† ∆∞u ti√™n c·ªßa ch√∫ng t√¥i</h4>
        <p>
          B·∫°n c√≥ th·ªÉ tham kh·∫£o Ch√≠nh s√°ch b·∫£o m·∫≠t <a href="#">t·∫°i ƒë√¢y</a>.
        </p>
      </div>

      <div className="checkbox-item">
        <input
          type="checkbox"
          id="terms"
          checked={formData.agreeToTerms}
          onChange={(e) => handleInputChange('agreeToTerms', e.target.checked)}
        />
        <label htmlFor="terms" className="checkbox-label">
          T√¥i hi·ªÉu r·∫±ng D·ªØ li·ªáu li√™n quan sau khi kh√°ch h√†ng v√† ph∆∞∆°ng ti·ªán ƒë∆∞·ª£c thu th·∫≠p trong qu√° tr√¨nh ƒë·∫∑t ch·ªó s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ti·∫øp ƒë·∫øn X∆∞·ªüng d·ªãch v·ª• ·ªßy quy·ªÅn Mercedes-Benz li√™n quan sau khi ho√†n th√†nh ƒë·∫∑t ch·ªó. T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng thu·∫≠n v·ªõi t·∫•t c·∫£ c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong Lu·∫≠t v√† D·ªØ li·ªáu C√° nh√¢n.
        </label>
      </div>
    </div>
  );

  const renderSidebar = () => {
    const selectedServicesData = services.filter(s => 
      formData.selectedServices.includes(s.id)
    );

    return (
      <div className="booking-right-sidebar">
        <div className="progress-percentage">
          ƒê√£ ho√†n th√†nh {Math.round(getProgressPercentage())}%
        </div>
        <div className="progress-bar-container">
          <div 
            className="progress-bar-fill" 
            style={{ width: `${getProgressPercentage()}%` }}
          />
        </div>

        {formData.licensePlate && (
          <div className="sidebar-section">
            <h3>Xe</h3>
            <div className="sidebar-item">
              <div className="sidebar-item-content">
                <h4>Mercedes-Benz Xe √¥ t√¥ con ƒêi·ªán</h4>
            <p>{formData.licensePlate}</p>
              </div>
              {currentStep > 1 && (
                <button 
                  className="sidebar-edit-btn"
                  onClick={() => setCurrentStep(1)}
                >
                  <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />
                  </svg>
                </button>
              )}
            </div>
          </div>
        )}

        {dealers.length > 0 && currentStep >= 2 && (
          <div className="sidebar-section">
            <h3>ƒê·∫°i l√Ω ·ªßy quy·ªÅn Mercedes-Benz</h3>
            <div className="sidebar-item">
              <div className="sidebar-item-content">
                <h4>{dealers[0].name}</h4>
              </div>
            </div>
          </div>
        )}

        {selectedServicesData.length > 0 && (
          <div className="sidebar-section">
            <h3>D·ªãch v·ª•</h3>
            {selectedServicesData.map(service => (
              <div key={service.id} className="sidebar-item">
                <div className="sidebar-item-content">
                  <h4>{service.name}</h4>
                </div>
                {currentStep > 2 && (
                  <button 
                    className="sidebar-edit-btn"
                    onClick={() => setCurrentStep(2)}
                  >
                    <svg viewBox="0 0 24 24" fill="currentColor">
                      <path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />
                    </svg>
                  </button>
                )}
              </div>
            ))}
          </div>
        )}

        {formData.selectedDate && formData.selectedTime && (
          <div className="sidebar-section">
            <h3>Ng√†y v√† gi·ªù</h3>
            <div className="sidebar-item">
              <div className="sidebar-item-content">
                <h4>Th·ª© S√°u, {formData.selectedDate} thg 10 2025, {formData.selectedTime}</h4>
              </div>
              {currentStep > 3 && (
                <button 
                  className="sidebar-edit-btn"
                  onClick={() => setCurrentStep(3)}
                >
                  <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />
                  </svg>
                </button>
              )}
            </div>
          </div>
        )}

        {formData.firstName && formData.lastName && (
          <div className="sidebar-section">
            <h3>Chi ti·∫øt c√° nh√¢n</h3>
          </div>
        )}

        {selectedServicesData.length > 0 && (
          <div className="sidebar-total">
            <h3>T·ªïng c·ªông</h3>
            <div className="sidebar-total-price">Gi√° theo y√™u c·∫ßu</div>
            <p>Ch·ªâ ph√≠ b·ªï sung c√≥ th·ªÉ ƒë∆∞·ª£c √°p d·ª•ng. Th√†nh to√°n s·∫Ω ch·ªâ ƒë∆∞·ª£c th·ª±c hi·ªán sau khi b·∫°n ch·∫•p thu·∫≠n v·ªõi ƒê·ªëi t√°c Mercedes-Benz c·ªßa b·∫°n.</p>
        </div>
        )}
    </div>
  );
  };

  return (
    <div className="tesla-booking-container">
      {/* Back to Home Button */}
      <button 
        className="back-to-home-btn"
        onClick={() => onNavigate('home')}
        title="Quay v·ªÅ trang ch·ªß"
      >
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z"/>
        </svg>
        <span>ƒê·∫∑t l·ªãch b·∫£o d∆∞·ª°ng</span>
      </button>

      {/* Top Header */}
      <div className="booking-top-header">
        <div className="booking-top-content">
          <div className="booking-breadcrumb">
            ƒê·∫∑t l·ªãch b·∫£o d∆∞·ª°ng ‚Ä∫ <span>{getStepTitle()}</span>
          </div>
          <button 
            className="booking-next-btn"
            onClick={currentStep === totalSteps ? handleSubmit : nextStep}
            disabled={
              (currentStep === 1 && !formData.licensePlate) ||
              (currentStep === 2 && formData.selectedServices.length === 0) ||
              (currentStep === 3 && (!formData.selectedDate || !formData.selectedTime)) ||
              (currentStep === 4 && (!formData.firstName || !formData.lastName || !formData.email || !formData.phone || !formData.agreeToTerms))
            }
          >
            {currentStep === totalSteps ? 'Ho√†n th√†nh' : 'Ti·∫øp t·ª•c'}
            <span>‚Ä∫</span>
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="tesla-booking-content">
        {/* Left Content */}
        <div className="booking-left-content">
          <div className="booking-step-header">
            <h1>{getStepTitle()}</h1>
            <p>{getStepSubtitle()}</p>
        </div>

          {currentStep === 1 && renderStep1()}
          {currentStep === 2 && renderStep2()}
          {currentStep === 3 && renderStep3()}
          {currentStep === 4 && renderStep4()}

        {/* Navigation Buttons */}
          <div className="step-navigation">
          {currentStep > 1 && (
            <button 
                className="nav-btn nav-btn-back"
              onClick={prevStep}
            >
                ‚Äπ L√™n tr√™n
            </button>
          )}
          </div>
        </div>

        {/* Right Sidebar */}
        {renderSidebar()}
      </div>
    </div>
  );
}

export default BookingPage;